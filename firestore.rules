rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isServer() {
      return request.auth != null && request.auth.token.get('admin', false) == true;
    }

    match /users/{userId} {
      allow read: if true;
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    match /sessions/{sessionId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.ownerId;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerId;
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.ownerId;
    }

    match /posts/{postId} {
      allow read: if true;
      allow create: if isSignedIn()
        && request.auth.uid == request.resource.data.authorId
        && request.resource.data.likeCount == 0;
      
      // 簡化更新規則，只檢查必要的欄位
      allow update: if isServer()
        || (
          isSignedIn()
          // 確保作者 ID 不變
          && request.resource.data.authorId == resource.data.authorId
          // 只檢查 likeCount 的變化
          && request.resource.data.likeCount >= 0
          && (
            // 允許 likeCount 加 1 或減 1
            request.resource.data.likeCount == resource.data.likeCount + 1 ||
            request.resource.data.likeCount == resource.data.likeCount - 1
          )
          // 確保其他必要欄位存在但不強制檢查值是否相同
          && 'authorName' in request.resource.data
          && 'authorAvatar' in request.resource.data
          && 'contentText' in request.resource.data
          && 'imageUrl' in request.resource.data
          && 'durationSec' in request.resource.data
          && 'finishedAt' in request.resource.data
          && 'createdAt' in request.resource.data
        );
      allow delete: if false;
    }

    match /postLikes/{likeId} {
      allow read: if true;
      allow create: if isSignedIn()
        && request.auth.uid == request.resource.data.userId
        && request.resource.data.postId is string;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow update: if false;
    }

    match /follows/{followId} {
      allow read: if true;
      allow create: if isSignedIn()
        && request.auth.uid == request.resource.data.followerId
        && request.resource.data.followeeId is string
        && request.resource.data.followeeId != request.auth.uid;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.followerId;
      allow update: if false;
    }

    match /chatThreads/{chatId} {
      allow read: if isSignedIn()
        && resource.data.participantIds is list
        && request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn()
        && request.resource.data.participantIds is list
        && request.auth.uid in request.resource.data.participantIds;
      allow update: if isSignedIn()
        && resource.data.participantIds is list
        && request.auth.uid in resource.data.participantIds;
      allow delete: if false;
    }

    match /messages/{messageId} {
      allow read: if isSignedIn()
        && (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId);
      allow create: if isSignedIn()
        && request.auth.uid == request.resource.data.senderId
        && request.resource.data.receiverId is string
        && request.resource.data.chatId is string
        && request.resource.data.text is string;
      allow update, delete: if false;
    }
  }
}
